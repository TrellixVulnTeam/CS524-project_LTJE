"""
    GAMS Engine

    With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.  # noqa: E501

    The version of the OpenAPI document: 21.07.20
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from gams_engine.api_client import ApiClient, Endpoint as _Endpoint
from gams_engine.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from gams_engine.model.bad_input import BadInput
from gams_engine.model.invitation import Invitation
from gams_engine.model.invitation_token import InvitationToken
from gams_engine.model.message import Message
from gams_engine.model.user import User


class UsersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_invitation(
            self,
            **kwargs
        ):
            """Creates an invitation code for new user  # noqa: E501

            Admins can invite admins, inviters and normal users. Inviters can invite inviters and normal users. Inviters cannot grant permissions that they do not posses. Requires admin or inviter role.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_invitation(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                roles ([str]): Possible values are: ['inviter', 'admin']. [optional]
                namespace_permissions ([str]): Syntax is permission_number@namespace_name, ie \"7@global\". [optional]
                parallel_quota (float): Number of GAMS Seconds that the user and the user's invitees can run in parallel. [optional]
                volume_quota (float): Number of GAMS Seconds that the user and the user's invitees can run in total. [optional]
                disk_quota (int): Storage space in bytes that the user and the user's invitees can use in total. [optional]
                labels ([str]): Instances to assign to user. [optional]
                default_label (str): Label of the instance to be used as default. [optional]
                user_groups ([str]): User groups to put the user in, in format user_group@namespace format. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InvitationToken
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_invitation = _Endpoint(
            settings={
                'response_type': (InvitationToken,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/users/invitation',
                'operation_id': 'create_invitation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'roles',
                    'namespace_permissions',
                    'parallel_quota',
                    'volume_quota',
                    'disk_quota',
                    'labels',
                    'default_label',
                    'user_groups',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parallel_quota',
                    'volume_quota',
                    'disk_quota',
                    'default_label',
                ]
            },
            root_map={
                'validations': {
                    ('parallel_quota',): {

                        'inclusive_minimum': 0,
                    },
                    ('volume_quota',): {

                        'inclusive_minimum': 0,
                    },
                    ('disk_quota',): {

                        'inclusive_maximum': 100000000000000,
                        'inclusive_minimum': 0,
                    },
                    ('default_label',): {
                        'max_length': 30,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'roles':
                        ([str],),
                    'namespace_permissions':
                        ([str],),
                    'parallel_quota':
                        (float,),
                    'volume_quota':
                        (float,),
                    'disk_quota':
                        (int,),
                    'labels':
                        ([str],),
                    'default_label':
                        (str,),
                    'user_groups':
                        ([str],),
                },
                'attribute_map': {
                    'roles': 'roles',
                    'namespace_permissions': 'namespace_permissions',
                    'parallel_quota': 'parallel_quota',
                    'volume_quota': 'volume_quota',
                    'disk_quota': 'disk_quota',
                    'labels': 'labels',
                    'default_label': 'default_label',
                    'user_groups': 'user_groups',
                },
                'location_map': {
                    'roles': 'form',
                    'namespace_permissions': 'form',
                    'parallel_quota': 'form',
                    'volume_quota': 'form',
                    'disk_quota': 'form',
                    'labels': 'form',
                    'default_label': 'form',
                    'user_groups': 'form',
                },
                'collection_format_map': {
                    'roles': 'csv',
                    'namespace_permissions': 'csv',
                    'labels': 'csv',
                    'user_groups': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__create_invitation
        )

        def __delete_invitation(
            self,
            token,
            **kwargs
        ):
            """Deletes an invitation if it is unused  # noqa: E501

            Admins can delete all unused invitations,  inviters can only delete invitations that belong to them or  that belong to direct/indirect invitees of them.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_invitation(token, async_req=True)
            >>> result = thread.get()

            Args:
                token (str): Token of the invitation to be deleted

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['token'] = \
                token
            return self.call_with_http_info(**kwargs)

        self.delete_invitation = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/users/invitation',
                'operation_id': 'delete_invitation',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'token',
                ],
                'required': [
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'token': 'token',
                },
                'location_map': {
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_invitation
        )

        def __delete_user(
            self,
            username,
            **kwargs
        ):
            """Deletes a user  # noqa: E501

            Admins can delete anyone, inviters can delete users who are directly/indirectly invited. Requires admin or inviter role.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_user(username, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): Username of the user to delete

            Keyword Args:
                delete_results (bool): Also delete all submission results that are related to the user. [optional]
                delete_children (bool): Delete users invited directly/indirectly by this user. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.delete_user = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/users/',
                'operation_id': 'delete_user',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'delete_results',
                    'delete_children',
                ],
                'required': [
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'delete_results':
                        (bool,),
                    'delete_children':
                        (bool,),
                },
                'attribute_map': {
                    'username': 'username',
                    'delete_results': 'delete_results',
                    'delete_children': 'delete_children',
                },
                'location_map': {
                    'username': 'query',
                    'delete_results': 'query',
                    'delete_children': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_user
        )

        def __list_invitations(
            self,
            **kwargs
        ):
            """Lists the invitation codes created by the user  # noqa: E501

            \"Everyone\" argument can only be set by the admin, and if it is set, all invitations are listed. Requires inviter or admin role.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_invitations(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                token (str): Invitation code to filter. [optional]
                everyone (bool): Can only be set by admin, lists all invitations. [optional]
                x_fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Invitation]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_invitations = _Endpoint(
            settings={
                'response_type': ([Invitation],),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/users/invitation',
                'operation_id': 'list_invitations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'token',
                    'everyone',
                    'x_fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'token':
                        (str,),
                    'everyone':
                        (bool,),
                    'x_fields':
                        (str,),
                },
                'attribute_map': {
                    'token': 'token',
                    'everyone': 'everyone',
                    'x_fields': 'X-Fields',
                },
                'location_map': {
                    'token': 'query',
                    'everyone': 'query',
                    'x_fields': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_invitations
        )

        def __list_users(
            self,
            **kwargs
        ):
            """If admin, lists all users  # noqa: E501

            If inviter, lists users invited directly/indirectly. If normal user, lists nothing unless username is set to logged-in user. Setting username filters the results.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_users(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                username (str): Username of the user to filter. [optional]
                x_fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [User]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_users = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/users/',
                'operation_id': 'list_users',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'x_fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'x_fields':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'x_fields': 'X-Fields',
                },
                'location_map': {
                    'username': 'query',
                    'x_fields': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_users
        )

        def __register(
            self,
            username,
            password,
            invitation_code,
            **kwargs
        ):
            """Creates a new user if the invitation code is valid and not used  # noqa: E501

            Username must be unique.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.register(username, password, invitation_code, async_req=True)
            >>> result = thread.get()

            Args:
                username (str):
                password (str):
                invitation_code (str): Invitation code

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['password'] = \
                password
            kwargs['invitation_code'] = \
                invitation_code
            return self.call_with_http_info(**kwargs)

        self.register = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [],
                'endpoint_path': '/users/',
                'operation_id': 'register',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'password',
                    'invitation_code',
                ],
                'required': [
                    'username',
                    'password',
                    'invitation_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'username',
                    'password',
                ]
            },
            root_map={
                'validations': {
                    ('username',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9_]{4,70}$',  # noqa: E501
                        },
                    },
                    ('password',): {

                        'regex': {
                            'pattern': r'^[0-9a-zA-Z!"#\$%&\'\(\)\*\+,\-\.\/:;<=>\?@[\]\^_`\{\|}~\\]{6,70}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'password':
                        (str,),
                    'invitation_code':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'password': 'password',
                    'invitation_code': 'invitation_code',
                },
                'location_map': {
                    'username': 'form',
                    'password': 'form',
                    'invitation_code': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__register
        )

        def __replace_user_password(
            self,
            username,
            password,
            **kwargs
        ):
            """Changes password of the user with the given username  # noqa: E501

            Users can change their own passwords, admins can change the password of anyone.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_user_password(username, password, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): Username of the user whose password is to be changed
                password (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            kwargs['password'] = \
                password
            return self.call_with_http_info(**kwargs)

        self.replace_user_password = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/users/',
                'operation_id': 'replace_user_password',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'password',
                ],
                'required': [
                    'username',
                    'password',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'password',
                ]
            },
            root_map={
                'validations': {
                    ('password',): {

                        'regex': {
                            'pattern': r'^[0-9a-zA-Z!"#\$%&\'\(\)\*\+,\-\.\/:;<=>\?@[\]\^_`\{\|}~\\]{6,70}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'password':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'password': 'password',
                },
                'location_map': {
                    'username': 'form',
                    'password': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__replace_user_password
        )

        def __update_user_role(
            self,
            username,
            **kwargs
        ):
            """Promotes/demotes user  # noqa: E501

            Admins can modify anyone. Inviters can modify direct/indirect invitees.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_user_role(username, async_req=True)
            >>> result = thread.get()

            Args:
                username (str): Username of the user whose roles are to be changed

            Keyword Args:
                roles ([str]): New roles of the user, possible values are: ['inviter', 'admin']. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['username'] = \
                username
            return self.call_with_http_info(**kwargs)

        self.update_user_role = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'BasicAuth'
                ],
                'endpoint_path': '/users/role',
                'operation_id': 'update_user_role',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'roles',
                ],
                'required': [
                    'username',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'roles':
                        ([str],),
                },
                'attribute_map': {
                    'username': 'username',
                    'roles': 'roles',
                },
                'location_map': {
                    'username': 'form',
                    'roles': 'form',
                },
                'collection_format_map': {
                    'roles': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__update_user_role
        )
