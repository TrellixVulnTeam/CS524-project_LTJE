# coding: utf-8

"""
    GAMS Engine

    With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.  # noqa: E501

    The version of the OpenAPI document: 21.06.03
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gams_engine.configuration import Configuration


class Result(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filename': 'str',
        'length': 'int',
        'namespace': 'str',
        'token': 'str',
        'type': 'str',
        'upload_date': 'datetime',
        'user': 'ResultUser'
    }

    attribute_map = {
        'filename': 'filename',
        'length': 'length',
        'namespace': 'namespace',
        'token': 'token',
        'type': 'type',
        'upload_date': 'upload_date',
        'user': 'user'
    }

    def __init__(self, filename=None, length=None, namespace=None, token=None, type=None, upload_date=None, user=None, local_vars_configuration=None):  # noqa: E501
        """Result - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filename = None
        self._length = None
        self._namespace = None
        self._token = None
        self._type = None
        self._upload_date = None
        self._user = None
        self.discriminator = None

        if filename is not None:
            self.filename = filename
        if length is not None:
            self.length = length
        if namespace is not None:
            self.namespace = namespace
        if token is not None:
            self.token = token
        if type is not None:
            self.type = type
        if upload_date is not None:
            self.upload_date = upload_date
        if user is not None:
            self.user = user

    @property
    def filename(self):
        """Gets the filename of this Result.  # noqa: E501


        :return: The filename of this Result.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Result.


        :param filename: The filename of this Result.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def length(self):
        """Gets the length of this Result.  # noqa: E501


        :return: The length of this Result.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Result.


        :param length: The length of this Result.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def namespace(self):
        """Gets the namespace of this Result.  # noqa: E501


        :return: The namespace of this Result.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Result.


        :param namespace: The namespace of this Result.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def token(self):
        """Gets the token of this Result.  # noqa: E501


        :return: The token of this Result.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Result.


        :param token: The token of this Result.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this Result.  # noqa: E501


        :return: The type of this Result.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Result.


        :param type: The type of this Result.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def upload_date(self):
        """Gets the upload_date of this Result.  # noqa: E501


        :return: The upload_date of this Result.  # noqa: E501
        :rtype: datetime
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this Result.


        :param upload_date: The upload_date of this Result.  # noqa: E501
        :type: datetime
        """

        self._upload_date = upload_date

    @property
    def user(self):
        """Gets the user of this Result.  # noqa: E501


        :return: The user of this Result.  # noqa: E501
        :rtype: ResultUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Result.


        :param user: The user of this Result.  # noqa: E501
        :type: ResultUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Result):
            return True

        return self.to_dict() != other.to_dict()
