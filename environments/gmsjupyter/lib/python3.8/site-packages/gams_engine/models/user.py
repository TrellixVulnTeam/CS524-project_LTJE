# coding: utf-8

"""
    GAMS Engine

    With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.  # noqa: E501

    The version of the OpenAPI document: 21.06.03
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gams_engine.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deleted': 'bool',
        'invitation_time': 'datetime',
        'inviter_name': 'str',
        'old_username': 'str',
        'roles': 'list[object]',
        'username': 'str'
    }

    attribute_map = {
        'deleted': 'deleted',
        'invitation_time': 'invitation_time',
        'inviter_name': 'inviter_name',
        'old_username': 'old_username',
        'roles': 'roles',
        'username': 'username'
    }

    def __init__(self, deleted=None, invitation_time=None, inviter_name=None, old_username=None, roles=None, username=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deleted = None
        self._invitation_time = None
        self._inviter_name = None
        self._old_username = None
        self._roles = None
        self._username = None
        self.discriminator = None

        if deleted is not None:
            self.deleted = deleted
        if invitation_time is not None:
            self.invitation_time = invitation_time
        if inviter_name is not None:
            self.inviter_name = inviter_name
        if old_username is not None:
            self.old_username = old_username
        if roles is not None:
            self.roles = roles
        if username is not None:
            self.username = username

    @property
    def deleted(self):
        """Gets the deleted of this User.  # noqa: E501


        :return: The deleted of this User.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this User.


        :param deleted: The deleted of this User.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def invitation_time(self):
        """Gets the invitation_time of this User.  # noqa: E501


        :return: The invitation_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._invitation_time

    @invitation_time.setter
    def invitation_time(self, invitation_time):
        """Sets the invitation_time of this User.


        :param invitation_time: The invitation_time of this User.  # noqa: E501
        :type: datetime
        """

        self._invitation_time = invitation_time

    @property
    def inviter_name(self):
        """Gets the inviter_name of this User.  # noqa: E501


        :return: The inviter_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._inviter_name

    @inviter_name.setter
    def inviter_name(self, inviter_name):
        """Sets the inviter_name of this User.


        :param inviter_name: The inviter_name of this User.  # noqa: E501
        :type: str
        """

        self._inviter_name = inviter_name

    @property
    def old_username(self):
        """Gets the old_username of this User.  # noqa: E501


        :return: The old_username of this User.  # noqa: E501
        :rtype: str
        """
        return self._old_username

    @old_username.setter
    def old_username(self, old_username):
        """Sets the old_username of this User.


        :param old_username: The old_username of this User.  # noqa: E501
        :type: str
        """

        self._old_username = old_username

    @property
    def roles(self):
        """Gets the roles of this User.  # noqa: E501


        :return: The roles of this User.  # noqa: E501
        :rtype: list[object]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.


        :param roles: The roles of this User.  # noqa: E501
        :type: list[object]
        """

        self._roles = roles

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
