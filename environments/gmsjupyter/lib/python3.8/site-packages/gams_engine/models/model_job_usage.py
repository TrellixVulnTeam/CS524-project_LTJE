# coding: utf-8

"""
    GAMS Engine

    With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.  # noqa: E501

    The version of the OpenAPI document: 21.06.03
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gams_engine.configuration import Configuration


class ModelJobUsage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'finished': 'datetime',
        'model': 'str',
        'namespace': 'str',
        'process_status': 'int',
        'status': 'int',
        'submitted': 'datetime',
        'times': 'list[TimeSpan]',
        'token': 'str',
        'username': 'str'
    }

    attribute_map = {
        'finished': 'finished',
        'model': 'model',
        'namespace': 'namespace',
        'process_status': 'process_status',
        'status': 'status',
        'submitted': 'submitted',
        'times': 'times',
        'token': 'token',
        'username': 'username'
    }

    def __init__(self, finished=None, model=None, namespace=None, process_status=None, status=None, submitted=None, times=None, token=None, username=None, local_vars_configuration=None):  # noqa: E501
        """ModelJobUsage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._finished = None
        self._model = None
        self._namespace = None
        self._process_status = None
        self._status = None
        self._submitted = None
        self._times = None
        self._token = None
        self._username = None
        self.discriminator = None

        if finished is not None:
            self.finished = finished
        if model is not None:
            self.model = model
        if namespace is not None:
            self.namespace = namespace
        if process_status is not None:
            self.process_status = process_status
        if status is not None:
            self.status = status
        if submitted is not None:
            self.submitted = submitted
        if times is not None:
            self.times = times
        if token is not None:
            self.token = token
        if username is not None:
            self.username = username

    @property
    def finished(self):
        """Gets the finished of this ModelJobUsage.  # noqa: E501


        :return: The finished of this ModelJobUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this ModelJobUsage.


        :param finished: The finished of this ModelJobUsage.  # noqa: E501
        :type: datetime
        """

        self._finished = finished

    @property
    def model(self):
        """Gets the model of this ModelJobUsage.  # noqa: E501


        :return: The model of this ModelJobUsage.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelJobUsage.


        :param model: The model of this ModelJobUsage.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def namespace(self):
        """Gets the namespace of this ModelJobUsage.  # noqa: E501


        :return: The namespace of this ModelJobUsage.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ModelJobUsage.


        :param namespace: The namespace of this ModelJobUsage.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def process_status(self):
        """Gets the process_status of this ModelJobUsage.  # noqa: E501


        :return: The process_status of this ModelJobUsage.  # noqa: E501
        :rtype: int
        """
        return self._process_status

    @process_status.setter
    def process_status(self, process_status):
        """Sets the process_status of this ModelJobUsage.


        :param process_status: The process_status of this ModelJobUsage.  # noqa: E501
        :type: int
        """

        self._process_status = process_status

    @property
    def status(self):
        """Gets the status of this ModelJobUsage.  # noqa: E501


        :return: The status of this ModelJobUsage.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelJobUsage.


        :param status: The status of this ModelJobUsage.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def submitted(self):
        """Gets the submitted of this ModelJobUsage.  # noqa: E501


        :return: The submitted of this ModelJobUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted

    @submitted.setter
    def submitted(self, submitted):
        """Sets the submitted of this ModelJobUsage.


        :param submitted: The submitted of this ModelJobUsage.  # noqa: E501
        :type: datetime
        """

        self._submitted = submitted

    @property
    def times(self):
        """Gets the times of this ModelJobUsage.  # noqa: E501


        :return: The times of this ModelJobUsage.  # noqa: E501
        :rtype: list[TimeSpan]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this ModelJobUsage.


        :param times: The times of this ModelJobUsage.  # noqa: E501
        :type: list[TimeSpan]
        """

        self._times = times

    @property
    def token(self):
        """Gets the token of this ModelJobUsage.  # noqa: E501


        :return: The token of this ModelJobUsage.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ModelJobUsage.


        :param token: The token of this ModelJobUsage.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def username(self):
        """Gets the username of this ModelJobUsage.  # noqa: E501


        :return: The username of this ModelJobUsage.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ModelJobUsage.


        :param username: The username of this ModelJobUsage.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelJobUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelJobUsage):
            return True

        return self.to_dict() != other.to_dict()
