# coding: utf-8

"""
    GAMS Engine

    With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.  # noqa: E501

    The version of the OpenAPI document: 21.06.03
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gams_engine.configuration import Configuration


class Invitation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'inviter_name': 'str',
        'permissions': 'list[str]',
        'roles': 'list[str]',
        'token': 'str',
        'used': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'created': 'created',
        'inviter_name': 'inviter_name',
        'permissions': 'permissions',
        'roles': 'roles',
        'token': 'token',
        'used': 'used',
        'username': 'username'
    }

    def __init__(self, created=None, inviter_name=None, permissions=None, roles=None, token=None, used=None, username=None, local_vars_configuration=None):  # noqa: E501
        """Invitation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created = None
        self._inviter_name = None
        self._permissions = None
        self._roles = None
        self._token = None
        self._used = None
        self._username = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if inviter_name is not None:
            self.inviter_name = inviter_name
        if permissions is not None:
            self.permissions = permissions
        if roles is not None:
            self.roles = roles
        if token is not None:
            self.token = token
        if used is not None:
            self.used = used
        if username is not None:
            self.username = username

    @property
    def created(self):
        """Gets the created of this Invitation.  # noqa: E501


        :return: The created of this Invitation.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Invitation.


        :param created: The created of this Invitation.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def inviter_name(self):
        """Gets the inviter_name of this Invitation.  # noqa: E501


        :return: The inviter_name of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._inviter_name

    @inviter_name.setter
    def inviter_name(self, inviter_name):
        """Sets the inviter_name of this Invitation.


        :param inviter_name: The inviter_name of this Invitation.  # noqa: E501
        :type: str
        """

        self._inviter_name = inviter_name

    @property
    def permissions(self):
        """Gets the permissions of this Invitation.  # noqa: E501


        :return: The permissions of this Invitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Invitation.


        :param permissions: The permissions of this Invitation.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def roles(self):
        """Gets the roles of this Invitation.  # noqa: E501


        :return: The roles of this Invitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Invitation.


        :param roles: The roles of this Invitation.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def token(self):
        """Gets the token of this Invitation.  # noqa: E501


        :return: The token of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Invitation.


        :param token: The token of this Invitation.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def used(self):
        """Gets the used of this Invitation.  # noqa: E501


        :return: The used of this Invitation.  # noqa: E501
        :rtype: bool
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this Invitation.


        :param used: The used of this Invitation.  # noqa: E501
        :type: bool
        """

        self._used = used

    @property
    def username(self):
        """Gets the username of this Invitation.  # noqa: E501


        :return: The username of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Invitation.


        :param username: The username of this Invitation.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invitation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Invitation):
            return True

        return self.to_dict() != other.to_dict()
