# coding: utf-8

"""
    GAMS Engine

    With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.  # noqa: E501

    The version of the OpenAPI document: 21.06.03
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gams_engine.configuration import Configuration


class JobNoTextEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arguments': 'list[str]',
        'finished_at': 'datetime',
        'is_data_provided': 'bool',
        'is_temporary_model': 'bool',
        'model': 'str',
        'namespace': 'str',
        'process_status': 'int',
        'status': 'int',
        'stdout_filename': 'str',
        'stream_entries': 'list[str]',
        'submitted_at': 'datetime',
        'token': 'str',
        'user': 'ResultUser'
    }

    attribute_map = {
        'arguments': 'arguments',
        'finished_at': 'finished_at',
        'is_data_provided': 'is_data_provided',
        'is_temporary_model': 'is_temporary_model',
        'model': 'model',
        'namespace': 'namespace',
        'process_status': 'process_status',
        'status': 'status',
        'stdout_filename': 'stdout_filename',
        'stream_entries': 'stream_entries',
        'submitted_at': 'submitted_at',
        'token': 'token',
        'user': 'user'
    }

    def __init__(self, arguments=None, finished_at=None, is_data_provided=None, is_temporary_model=None, model=None, namespace=None, process_status=None, status=None, stdout_filename=None, stream_entries=None, submitted_at=None, token=None, user=None, local_vars_configuration=None):  # noqa: E501
        """JobNoTextEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arguments = None
        self._finished_at = None
        self._is_data_provided = None
        self._is_temporary_model = None
        self._model = None
        self._namespace = None
        self._process_status = None
        self._status = None
        self._stdout_filename = None
        self._stream_entries = None
        self._submitted_at = None
        self._token = None
        self._user = None
        self.discriminator = None

        if arguments is not None:
            self.arguments = arguments
        if finished_at is not None:
            self.finished_at = finished_at
        if is_data_provided is not None:
            self.is_data_provided = is_data_provided
        if is_temporary_model is not None:
            self.is_temporary_model = is_temporary_model
        if model is not None:
            self.model = model
        if namespace is not None:
            self.namespace = namespace
        if process_status is not None:
            self.process_status = process_status
        if status is not None:
            self.status = status
        if stdout_filename is not None:
            self.stdout_filename = stdout_filename
        if stream_entries is not None:
            self.stream_entries = stream_entries
        if submitted_at is not None:
            self.submitted_at = submitted_at
        if token is not None:
            self.token = token
        if user is not None:
            self.user = user

    @property
    def arguments(self):
        """Gets the arguments of this JobNoTextEntry.  # noqa: E501


        :return: The arguments of this JobNoTextEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this JobNoTextEntry.


        :param arguments: The arguments of this JobNoTextEntry.  # noqa: E501
        :type: list[str]
        """

        self._arguments = arguments

    @property
    def finished_at(self):
        """Gets the finished_at of this JobNoTextEntry.  # noqa: E501


        :return: The finished_at of this JobNoTextEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this JobNoTextEntry.


        :param finished_at: The finished_at of this JobNoTextEntry.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def is_data_provided(self):
        """Gets the is_data_provided of this JobNoTextEntry.  # noqa: E501


        :return: The is_data_provided of this JobNoTextEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_data_provided

    @is_data_provided.setter
    def is_data_provided(self, is_data_provided):
        """Sets the is_data_provided of this JobNoTextEntry.


        :param is_data_provided: The is_data_provided of this JobNoTextEntry.  # noqa: E501
        :type: bool
        """

        self._is_data_provided = is_data_provided

    @property
    def is_temporary_model(self):
        """Gets the is_temporary_model of this JobNoTextEntry.  # noqa: E501


        :return: The is_temporary_model of this JobNoTextEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_temporary_model

    @is_temporary_model.setter
    def is_temporary_model(self, is_temporary_model):
        """Sets the is_temporary_model of this JobNoTextEntry.


        :param is_temporary_model: The is_temporary_model of this JobNoTextEntry.  # noqa: E501
        :type: bool
        """

        self._is_temporary_model = is_temporary_model

    @property
    def model(self):
        """Gets the model of this JobNoTextEntry.  # noqa: E501


        :return: The model of this JobNoTextEntry.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this JobNoTextEntry.


        :param model: The model of this JobNoTextEntry.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def namespace(self):
        """Gets the namespace of this JobNoTextEntry.  # noqa: E501


        :return: The namespace of this JobNoTextEntry.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this JobNoTextEntry.


        :param namespace: The namespace of this JobNoTextEntry.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def process_status(self):
        """Gets the process_status of this JobNoTextEntry.  # noqa: E501


        :return: The process_status of this JobNoTextEntry.  # noqa: E501
        :rtype: int
        """
        return self._process_status

    @process_status.setter
    def process_status(self, process_status):
        """Sets the process_status of this JobNoTextEntry.


        :param process_status: The process_status of this JobNoTextEntry.  # noqa: E501
        :type: int
        """

        self._process_status = process_status

    @property
    def status(self):
        """Gets the status of this JobNoTextEntry.  # noqa: E501


        :return: The status of this JobNoTextEntry.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobNoTextEntry.


        :param status: The status of this JobNoTextEntry.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def stdout_filename(self):
        """Gets the stdout_filename of this JobNoTextEntry.  # noqa: E501


        :return: The stdout_filename of this JobNoTextEntry.  # noqa: E501
        :rtype: str
        """
        return self._stdout_filename

    @stdout_filename.setter
    def stdout_filename(self, stdout_filename):
        """Sets the stdout_filename of this JobNoTextEntry.


        :param stdout_filename: The stdout_filename of this JobNoTextEntry.  # noqa: E501
        :type: str
        """

        self._stdout_filename = stdout_filename

    @property
    def stream_entries(self):
        """Gets the stream_entries of this JobNoTextEntry.  # noqa: E501


        :return: The stream_entries of this JobNoTextEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._stream_entries

    @stream_entries.setter
    def stream_entries(self, stream_entries):
        """Sets the stream_entries of this JobNoTextEntry.


        :param stream_entries: The stream_entries of this JobNoTextEntry.  # noqa: E501
        :type: list[str]
        """

        self._stream_entries = stream_entries

    @property
    def submitted_at(self):
        """Gets the submitted_at of this JobNoTextEntry.  # noqa: E501


        :return: The submitted_at of this JobNoTextEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this JobNoTextEntry.


        :param submitted_at: The submitted_at of this JobNoTextEntry.  # noqa: E501
        :type: datetime
        """

        self._submitted_at = submitted_at

    @property
    def token(self):
        """Gets the token of this JobNoTextEntry.  # noqa: E501


        :return: The token of this JobNoTextEntry.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this JobNoTextEntry.


        :param token: The token of this JobNoTextEntry.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def user(self):
        """Gets the user of this JobNoTextEntry.  # noqa: E501


        :return: The user of this JobNoTextEntry.  # noqa: E501
        :rtype: ResultUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JobNoTextEntry.


        :param user: The user of this JobNoTextEntry.  # noqa: E501
        :type: ResultUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobNoTextEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobNoTextEntry):
            return True

        return self.to_dict() != other.to_dict()
